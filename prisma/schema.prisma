generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String                 @id @default(cuid())
  name          String?
  email         String?                @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  propertyAgent PropertyAgent[]
  savedListing  SavedPropertyListing[]
}

//#endregion  //*======== PROPERTY ===========

enum PropertyType {
  rent
  sale
}

enum ListingSource {
  homey
  ninetyNineCo
}

model PropertyAgent {
  ceaLicense     String            @id
  phoneNumber    String
  isVerified     Boolean           @default(false)
  userId         String            @unique
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postedListings PropertyListing[]
}

model PropertyListing {
  id          String        @id @default(cuid())
  source      ListingSource @default(homey)
  type        PropertyType  @default(rent)
  isAvailable Boolean       @default(true)
  category    String
  href        String
  photoUrl    String?

  stringifiedSnapshot String?

  agentId String?
  agent   PropertyAgent? @relation(fields: [agentId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  savedBy SavedPropertyListing[]
}

model Neighbourhood {
  name     String @unique
  assetUrl String
  zoneId   String
}

//#endregion  //*======== PROPERTY ===========

//#endregion  //*======== ACCOUNT ===========

model SavedPropertyListing {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertyId String          @unique
  property   PropertyListing @relation(fields: [propertyId], references: [id], onUpdate: Cascade)

  @@id([userId, propertyId])
}

//#endregion  //*======== ACCOUNT ===========
