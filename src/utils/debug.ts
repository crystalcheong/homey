/* eslint-disable no-console */

import { env } from "@/env.mjs";

export enum LogLevel {
  Error = "error",
  Warn = "warn",
  Info = "info",
  Debug = "debug",
  Default = "log",
}

const LogLevels: Record<LogLevel, Record<string, string>> = {
  [LogLevel.Error]: {
    title: "ðŸš¨",
    background: "#ef4444",
  },
  [LogLevel.Warn]: {
    title: "ðŸ””",
    background: "#fb923c",
  },
  [LogLevel.Info]: {
    title: "ðŸ‘€",
    background: "#10b981",
  },
  [LogLevel.Debug]: {
    title: "ðŸ”Ž",
    background: "#0ea5e9",
  },
  [LogLevel.Default]: {
    title: "ðŸªµ",
    background: "#f472b6",
  },
};

/**
 * @title Debug Logger
 * @description Apply console logger exclusively in development environment
 * @param breakpointComment - Autogenerated with `lg` snippet
 */
export const logger = (breakpoint?: string, ...messages: unknown[]): void => {
  const isVisible: boolean = env.NEXT_PUBLIC_SHOW_LOGGER === "true" || false;
  if (!isVisible) return;

  let level = LogLevel.Info;

  let messageIndex = 0;

  // Check if the first parameter is a log level
  if (
    typeof messages[0] === "string" &&
    Object.values(LogLevel).includes(messages[0] as LogLevel)
  ) {
    level = messages[0] as LogLevel;
    messageIndex = 1;
  }

  const logLevel = LogLevels[level];

  const css = `
    color: #ffffff;
    background-color: ${logLevel.background};
    font-weight: bold;
    padding: 3px;
  `;
  const styles: string[] = [
    css,
    `${css}; font-weight: bold;`,
    `${css}; font-weight: normal;`,
  ];

  const parts = ["%c", logLevel.title, `%c${breakpoint}%c`];

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const args: any[] = [...styles, ...messages.slice(messageIndex)];

  console[level].apply(null, [parts.join(" ")].concat(args));
};
